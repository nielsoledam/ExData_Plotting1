cut2(mergeData5$Gross.domestic.product.2012,g=5)
mergeData6 <- cut2(mergeData5$Gross.domestic.product.2012,g=5)
summary(mergeData6)
mergeData5$dataGroups <- cut2(mergeData5$Gross.domestic.product.2012,g=5)
head(mergeData5)
dcast(mergeData5, dataGroups, Gross.domestic.product.2012, mean )
dcast(mergeData5, dataGroups ~ Gross.domestic.product.2012, mean )
dcast(mergeData5, dataGroups ~ Gross.domestic.product.2012, mean, na.rm=TRUE )
mergeData5
mergeData5[,1:6] <- as.numeric(mergeData5[,1:6], na.rm=TRUE)
mergeData5[,1:6]
as.numeric(mergeData5[,1:6], na.rm=TRUE)
as.numeric(mergeData5[,1:6])
sapply(mergeData5[,1:6],as.numeric)
sapply(mergeData5[,1:6],as.numeric, na.rm=TRUE)
sapply(mergeData5[,1:6], na.rm=TRUE)
sapply(mergeData5[,1:6], as.numeric(..., na.rm=TRUE))
sapply(mergeData5[,1:6], as.numeric(, na.rm=TRUE))
sapply(mergeData5[,1:6], as.numeric(., na.rm=TRUE))
mergeData5
dcast(mergeData5, dataGroups ~ Gross.domestic.product.2012)
dcast(mergeData5, dataGroups ~ Gross.domestic.product.2012, meam)
dcast(mergeData5, dataGroups ~ Gross.domestic.product.2012, mean)
dcast(mergeData5, dataGroups ~ Gross.domestic.product.2012)
dcast(mergeData5,  Gross.domestic.product.2012~ dataGroups)
dcast(mergeData5, dataGroups + Income.Group ~ Gross.domestic.product.2012)
mergeData5
mergeData4
mergeData4$dataGroups <- cut2(mergeData4$Gross.domestic.product.2012, g=5)
mergeData4
dcast(mergeData4, dataGroups + Income.Group ~ Gross.domestic.product.2012)
dcast(mergeData4, dataGroups + Income.Group ~ Gross.domestic.product.2012, mean)
dcast(mergeData4, dataGroups + Income.Group ~ Gross.domestic.product.2012)
dcast(mergeData4, dataGroups ~ Gross.domestic.product.2012)
dcast(mergeData4, dataGroups ~ Gross.domestic.product.2012, mean)
dcast(mergeData4, Income.Group + dataGroups ~ Gross.domestic.product.2012)
names(mergeData4)
xtabs(Gross.domestic.product.2012 ~ Income.Group + dataGroups, data=mergeData4)
xtabs(mean(Gross.domestic.product.2012) ~ Income.Group + dataGroups, data=mergeData4)
xtabs(Gross.domestic.product.2012 ~ Income.Group + dataGroups, data=mergeData4)
xtabs(Gross.domestic.product.2012 ~ Income.Group + dataGroups, data=mergeData4)
mergeData4
summary(mergeData4)
summary(xtabs(Gross.domestic.product.2012 ~ Income.Group + dataGroups, data=mergeData4))
mergeData3
mergeData4
mergeData4$ONE <- 1
mergeData4
xtabs(ONE ~ Income.Group + dataGroups, data=mergeData4)
gdp
gdp[,CountryCode]
gdp[,gdp$CountryCode]
gdp[,"CountryCode"]
download.file("http://historienet.dk/magpeople/taxonomyfeed/6","histdata.xml")
wordlistXML <- read.XML("hisdata.xml")
library(XML)
wordlistXML <- xmlTreeParse("hisdata.xml", useInternal=TRUE)
wordlistXML <- xmlTreeParse("http://historienet.dk/magpeople/taxonomyfeed/6", useInternal=TRUE)
head(wordlistXML)
rootNode <- xmlRoot(wordlistXML)
names(rootNode)
rootNode[[1]]
DF <- data.frame(name=xpathSApply(rootNode, "//node", xmlValue))
head(DF)
DF <- data.frame(name=xpathSApply(rootNode, "//name", xmlValue))
head(DF)
DF
names(rootNode)
?xpathSApply
DF2 <- data.frame(name=xpathSApply(rootNode, "//tid", xmlValue))
head(DF2)
DF2 <- data.frame(name=xpathSApply(rootNode, "//vid", xmlValue))
head(DF2)
DF2 <- data.frame(name=xpathSApply(rootNode, "/tid", xmlValue))
head(DF2)
DF2 <- data.frame(name=xpathSApply(rootNode, "/terms", xmlValue))
head(DF2)
DF2 <- data.frame(name=xpathSApply(rootNode, "//terms", xmlValue))
head(DF2)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
swirl()
mydf <- read.csv(path2csv, stirngsAsFactors=False)
mydf <- read.csv(path2csv, stirngsAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
View(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(1:3))
select(cran, -(1:4))
select(cran, -(X:size))
filter(cran, package =="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os =="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version)==TRUE)
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran, ip_id)
arrange(cran, ip_id)
?manip
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes =mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
?n
?n_distinct
summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
nxt()
submit()
submit()
bye
bye()
swirl()
library(swirl)
swirl()
submit()
swirl()
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(plyr)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
sessionInfo()
?uninstall_course
course_name
uninstall_course("Linear Regression")
?swirl
swirl(resume.class="Grouping and Chaining with dplyr")
swirl(resume.class="Getting and Cleaning Data")
swirl(resume.class="Grouping and Chaining with dplyr")
submit()
swirl(resume.class="Grouping and Chaining with dplyr")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(count))
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed <- passed %>% mutate(status="passed")
failed <- failed %>% mutate(status="failed")
?rbind_list
rbind_list(passed, failed)
sat
?select
?separate
df <- data.frame(x = c("a.b", "a.d", "b.c"))
df
df %>% separate(x, c("A", "B"))
submit()
submit()
bye()
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
year()
wday(this_day)
wday(this_day, label=TRUE)
now()
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment <- update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
?now
now("CET")
now("America/New_York")
nyc <- now("America/New_York")
nyc
now("EDT")
dapart <- nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + days(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last <- mdy("June 17, 2008", tz="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
how_long
class(how_long)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "data.csv", method="curl")
?strsplit
df <- read.csv("data.csv")
head(df)
names(df)
strsplit(df,"wgtp")
strsplit(names(df),"wgtp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "data.csv", method="curl")
df <- read.csv("data.csv")
summary(df)
df$X.3 <- gsub(",", "", df$X.3)
summary
summary(df)
df$X3
df <- read.csv("data.csv")
head df
head(df)
gsub(",", "", df$X.3)
df$X.3 <- as.numeric(gsub(",", "", df$X.3))
summary(df)
df
df <- read.csv("data.csv")
df
df$X.3 <- as.numeric(gsub(",", "", df$X.3), rm.na=TRUE)
df
df <- read.csv("data.csv")
library(tidyr)
df %>% mutate(GDP_numeric =gsub(",", "", X.3))
library(dplyr)
df %>% mutate(GDP_numeric =gsub(",", "", X.3))
df %>% mutate(GDP_numeric =as.numeric(gsub(",", "", X.3))
df %>% mutate(GDP_numeric =as.numeric(gsub(",", "", X.3)))
df %>% mutate(GDP_numeric=as.numeric(gsub(",", "", X.3))) %>% filter(5:219)
df %>% mutate(GDP_numeric=as.numeric(gsub(",", "", X.3))) %>% filter(c(5:219)
df %>% mutate(GDP_numeric=as.numeric(gsub(",", "", X.3))) %>% filter(c(5:219))
df2 <- df %>% mutate(GDP_numeric=as.numeric(gsub(",", "", X.3)))
mean(df2$GDP_numeric[5:219])
summary(df2$GDP_numeric[5:219])
mean(as.numeric(df2$GDP_numeric[5:219]))
df2$GDP_numeric[5:219]
summary(df2$GDP_numeric[5:219])
mean(df2$GDP_numeric[5:219])
mean(df2$GDP_numeric[5:219],rm.na=TRUE)
?mean
mean(df2$GDP_numeric[5:219],na.rm=TRUE)
df <- read.csv("data.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "data.csv", method="curl")
edu <- read.csv("data.csv")
head(df)
head(edu)
df <- tbl_df(df)
df
edu <- tbl_df(edu)
edu
names(edu)
df %>% mutate(CountryCode=X)
dfedu <- arrange(join(edu,df), CountryCode)
library(plyr)
dfedu <- arrange(join(edu,df), CountryCode)
dfedu
head/dfedu
head(dfedu)
names(dfedu)
summary(dfedu)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN", auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
years <- ymd(sampleTimes)
head(years)
years <- year(sampleTimes)
head(years)
summary(years)
count(years)
days <- wday(sampleTimes)
count(days)
days <- count(wday(sampleTimes[years=="2012"]))
days
##
## This script reproduces the plot3.png file from the ExData_Plotting1 assignment
##
## Niels Ole Dam, 10/10-2014
##
## Read the data
data <- read.csv("household_power_consumption.txt", sep=";", stringsAsFactors=FALSE )
## Convert the Date variable to the correct type
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## Subsetting to the required date interval
data <- subset(data, Date >= as.Date("2007-02-01") & Date <= as.Date("2007-02-02"))
## Convert the other variables to the correct types
data$Time <- strptime(paste(as.character(data$Date), data$Time), format="%Y-%m-%d %H:%M:%S")
data$Global_active_power <- as.numeric(data$Global_active_power)
data$Global_reactive_power <- as.numeric(data$Global_reactive_power)
data$Voltage <- as.numeric(data$Voltage)
data$Global_intensity <- as.numeric(data$Global_intensity)
data$Sub_metering_1 <- as.numeric(data$Sub_metering_1)
data$Sub_metering_2 <- as.numeric(data$Sub_metering_2)
data$Sub_metering_3 <- as.numeric(data$Sub_metering_3)
## Open the png device, plot to the file and close the device
png(filename="plot3.png")
par(mar=c(4,4,4,2))
## Plot the data
with(data,
plot(Time, Sub_metering_1, type="l", ylab="Energy sub metering", col="black"),
plot(Time, Sub_metering_2, type="l", col="red"),
plot(Time, Sub_metering_3, type="l", col="blue")
)
## Add the legend
legend("topright",
lwd=1,
col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
)
dev.off()
getwd()
setwd( "/Users/nielsoledam/Desktop/Coursera/exdata-007/ExData_Plotting1")
##
## This script reproduces the plot3.png file from the ExData_Plotting1 assignment
##
## Niels Ole Dam, 10/10-2014
##
## Read the data
data <- read.csv("household_power_consumption.txt", sep=";", stringsAsFactors=FALSE )
## Convert the Date variable to the correct type
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## Subsetting to the required date interval
data <- subset(data, Date >= as.Date("2007-02-01") & Date <= as.Date("2007-02-02"))
## Convert the other variables to the correct types
data$Time <- strptime(paste(as.character(data$Date), data$Time), format="%Y-%m-%d %H:%M:%S")
data$Global_active_power <- as.numeric(data$Global_active_power)
data$Global_reactive_power <- as.numeric(data$Global_reactive_power)
data$Voltage <- as.numeric(data$Voltage)
data$Global_intensity <- as.numeric(data$Global_intensity)
data$Sub_metering_1 <- as.numeric(data$Sub_metering_1)
data$Sub_metering_2 <- as.numeric(data$Sub_metering_2)
data$Sub_metering_3 <- as.numeric(data$Sub_metering_3)
## Open the png device, plot to the file and close the device
png(filename="plot3.png")
par(mar=c(4,4,4,2))
## Plot the data
with(data,
plot(Time, Sub_metering_1, type="l", ylab="Energy sub metering", col="black"),
plot(Time, Sub_metering_2, type="l", col="red"),
plot(Time, Sub_metering_3, type="l", col="blue")
)
## Add the legend
legend("topright",
lwd=1,
col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
)
dev.off()
with(data,
plot(Time, Sub_metering_1, type="n", ylab="Energy sub metering", xlab=""),
plot(Time, Sub_metering_2, type="n"),
plot(Time, Sub_metering_3, type="n")
)
## Plot the data
with(data, plot(Time, Sub_metering_1, type="l", ylab="", xlab="", col="black"))
with(data, plot(Time, Sub_metering_2, type="l", ylab="", xlab="", col="red"))
with(data, plot(Time, Sub_metering_3, type="l", ylab="", xlab="", col="blue"))
## Add the legend
legend("topright",
lwd=1,
col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
)
with(data,
plot(Time, Sub_metering_1, type="n", ylab="Energy sub metering", xlab=""),
plot(Time, Sub_metering_2, type="n"),
plot(Time, Sub_metering_3, type="n")
)
## Plot the data
plot(data$Time, data$Sub_metering_1, type="l", ylab="", xlab="", col="black")
plot(data$Time, data$Sub_metering_2, type="l", ylab="", xlab="", col="red")
plot(data$Time, data$Sub_metering_3, type="l", ylab="", xlab="", col="blue")
## Add the legend
legend("topright",
lwd=1,
col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
)
?lines
with(data,
plot(Time, Sub_metering_1, type="n", ylab="Energy sub metering", xlab=""),
plot(Time, Sub_metering_2, type="n"),
plot(Time, Sub_metering_3, type="n")
)
## Plot the data
lines(data$Time, data$Sub_metering_1, col="black")
lines(data$Time, data$Sub_metering_2, col="red")
lines(data$Time, data$Sub_metering_3, col="blue")
## Add the legend
legend("topright",
lwd=1,
col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
)
